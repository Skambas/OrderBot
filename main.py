import time
import telebot
from telebot import types
from pymongo import MongoClient
from dotenv import load_dotenv
from bson import ObjectId
from datetime import datetime
from telebot import apihelper
import os

load_dotenv()
bot = telebot.TeleBot(os.getenv('BOT_TOKEN'))
client = MongoClient(os.getenv('MONGO_CONNECT_URL'))
MANAGER_CHAT_ID = os.getenv('MANAGER_CHAT_ID')

db = client['Pinyatko_orderBot']
pins_collection = db['Pins']
clients_collection = db['Clients']
orders_collection = db['Orders']

carts = {}


# –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
@bot.message_handler(commands=['start'])
def start(message):
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
    if clients_collection.find_one({"chatID": message.chat.id}) is None:  # —è–∫—â–æ —â–µ –Ω–µ–º–∞—î —Ç–∞–∫–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
        clients_collection.insert_one(
            {'chatID': message.chat.id, 'status': 0, 'username': message.from_user.username, 'last_message_time': None})

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    button1 = types.KeyboardButton('–ó–∞–º–æ–≤–∏—Ç–∏ –ø—ñ–Ω(-–∏)')
    manager_button = types.KeyboardButton('–ó–≤\'—è–∑–æ–∫ –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º')
    cart_button = types.KeyboardButton('–ö–æ—à–∏–∫')
    volunteer_btn = types.KeyboardButton('–Ø –≤—ñ–π—Å—å–∫–æ–≤–∏–π(-–∞)/–≤–æ–ª–æ–Ω—Ç–µ—Ä(-–∫–∞)')
    keyboard.add(button1, manager_button, volunteer_btn, cart_button)

    bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –¥—ñ—é:', reply_markup=keyboard)


# –æ–±—Ä–æ–±–∫–∞ –∑–≤—è–∑–∫—É –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
@bot.message_handler(
    func=lambda message: message.text == '–ó–≤\'—è–∑–æ–∫ –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º')
def manager_chat(message):
    manager_button = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton(text='–ú–µ–Ω–µ–¥–∂–µ—Ä', url='https://t.me/pinyatkomanager'))
    bot.send_message(message.chat.id, '–ß–∞—Ç –∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:', reply_markup=manager_button)


# –æ–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥
@bot.message_handler(func=lambda message: message.text == '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥')
def back_button(message):
    start(message)


# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä

@bot.message_handler(func=lambda message: message.text == '–Ø –≤—ñ–π—Å—å–∫–æ–≤–∏–π(-–∞)/–≤–æ–ª–æ–Ω—Ç–µ—Ä(-–∫–∞)')
def volunteer_processing(message):
    user_id = message.from_user.id

    # –°—Ç–≤–æ—Ä—é—î–º–æ inline –∫–Ω–æ–ø–∫–∏
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    volonteer_btn = types.KeyboardButton("–Ø –≤–æ–ª–æ–Ω—Ç–µ—Ä(-–∫–∞)")
    military_btn = types.KeyboardButton("–Ø –≤—ñ–π—Å—å–∫–æ–≤–∏–π(-–≤–∞)")
    back_btn = types.KeyboardButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥")
    keyboard.add(volonteer_btn, military_btn, back_btn)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏
    bot.send_message(user_id, f'–ú–∏ –≤–¥—è—á–Ω—ñ –≤–∞–º –∑–∞ –≤–∞—à—É —Ä–æ–±–æ—Ç—É, —Ç–æ–º—É –ø—Ä–æ–ø–æ–Ω—É—î–º–æ –í–∞–º –∑–Ω–∏–∂–∫—É‚ù§Ô∏è‚Äçü©π.\n'
                              f'–í–æ–ª–æ–Ω—Ç–µ—Ä–∞–º 22%\n'
                              f'–í—ñ–π—Å—å–∫–æ–≤–∏–º 33%\n'
                              f'–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –∫–Ω–æ–ø–∫—É, –ø—ñ—Å–ª—è —á–æ–≥–æ –∑ –í–∞–º–∏ –∑–≤\'—è–∂–µ—Ç—å—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è',
                     reply_markup=keyboard)


@bot.message_handler(func=lambda message: message.text in ['–Ø –≤—ñ–π—Å—å–∫–æ–≤–∏–π(-–≤–∞)', '–Ø –≤–æ–ª–æ–Ω—Ç–µ—Ä(-–∫–∞)'])
def client_status_request(message):
    try:
        user_id = message.from_user.id
        user_status = clients_collection.find_one({'chatID': user_id})['status']

        last_message_time = clients_collection.find_one({'chatID': user_id})['last_message_time']
        current_time = time.time()

        # –Ø–∫—â–æ —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ 5 —ñ —á–∞—Å –∑ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—ñ–ª—å—à–µ –Ω—ñ–∂ 5 —Ö–≤–∏–ª–∏–Ω
        if user_status == 5 and (last_message_time is None or current_time - last_message_time > 10):
            bot.send_message(user_id, '–í–∞—à –∑–∞–ø–∏—Ç —É–∂–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ.')
            # –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            clients_collection.update_one({'chatID': user_id}, {"$set": {'last_message_time': current_time}})
        elif user_status != 5:
            if message.text == "–Ø –≤—ñ–π—Å—å–∫–æ–≤–∏–π(-–≤–∞)":
                clients_collection.update_one({'chatID': user_id}, {"$set": {'status': 5}})
                bot.send_message(MANAGER_CHAT_ID, f'–ù–∞–¥—ñ–π—à–æ–≤ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Ç –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–µ–∂–Ω–Ω—è —Å—Ç–∞—Ç—É—Å–∞ –≤—ñ–π—Å—å–∫–æ–≤–æ–≥–æ:\n'
                                                  f'userID: {user_id}, username: @{message.from_user.username}')
                bot.send_message(user_id,
                                 f'–í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ. –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–≤\'—è–∂–µ—Ç—å—Å—è –∑ –í–∞–º–∏ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ')
            elif message.text == "–Ø –≤–æ–ª–æ–Ω—Ç–µ—Ä(-–∫–∞)":
                clients_collection.update_one({'chatID': user_id}, {"$set": {'status': 5}})
                bot.send_message(MANAGER_CHAT_ID, f'–ù–∞–¥—ñ–π—à–æ–≤ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Ç –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–µ–∂–Ω–Ω—è —Å—Ç–∞—Ç—É—Å–∞ –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞:\n'
                                                  f'userID: {user_id}, username: @{message.from_user.username}')
                bot.send_message(user_id,
                                 f'–í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ. –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–≤\'—è–∂–µ—Ç—å—Å—è –∑ –í–∞–º–∏ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ')
    except Exception as e:
        print(f'[ERROR] {e}')


@bot.message_handler(func=lambda message: message.text == '–û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫')
def clear_cart(message):
    try:
        user_id = message.from_user.id
        if user_id in carts:
            del carts[user_id]  # –û—á–∏—â–µ–Ω–Ω—è –∫–æ—à–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            bot.send_message(message.chat.id, "–í–∞—à –∫–æ—à–∏–∫ –æ—á–∏—â–µ–Ω–æ")
        else:
            bot.send_message(message.chat.id, "–ö–æ—à–∏–∫ –≤–∂–µ –ø–æ—Ä–æ–∂–Ω—ñ–π")
    except Exception as e:
        print(f'[clear_cart ERROR] {e}')


@bot.message_handler(func=lambda message: message.text == '–ö–æ—à–∏–∫')
def show_cart(message):
    try:
        user_id = message.from_user.id
        cart = carts.get(user_id, {})
        if not cart:
            bot.send_message(message.chat.id, "–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π")
        else:
            response = "–í–º—ñ—Å—Ç –≤–∞—à–æ–≥–æ –∫–æ—à–∏–∫–∞:\n"
            for pin, quantity in cart.items():
                response += f"{pin}: {quantity} —à—Ç.\n"
            total_price = get_order_price(user_id)
            response += f"\n–í—Å—å–æ–≥–æ –¥–æ –æ–ø–ª–∞—Ç–∏: {total_price}–≥—Ä–Ω.\n"
            bot.send_message(message.chat.id, response)

        # –ö–Ω–æ–ø–∫–∏
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        back_btn = types.KeyboardButton('–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥')
        confirm_btn = types.KeyboardButton('–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
        clear_cart_btn = types.KeyboardButton('–û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ—à–∏–∫')
        keyboard.add(back_btn, confirm_btn, clear_cart_btn)
        bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –¥—ñ—é:', reply_markup=keyboard)
    except Exception as e:
        print(f'[clear_cart ERROR] {e}')


# —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è —Ü—ñ–Ω–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
def get_order_price(user_id):
    cart = carts.get(user_id, {})
    if not cart:
        return 0
    price = 0
    for pin, quantity in cart.items():
        price += pins_collection.find_one({'name': pin})['price'] * quantity
    if clients_collection.find_one({'chatID': user_id, 'status': 1}):
        return price - (price * 22 / 100)  # –¥–ª—è –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞ -22%
    elif clients_collection.find_one({'chatID': user_id, 'status': 2}):
        return price - (price * 33 / 100)  # –¥–ª—è –≤—ñ–π—Å—å–∫–æ–≤–æ–≥–æ -33%
    else:
        return price


@bot.message_handler(func=lambda message: message.text == '–ó–∞–º–æ–≤–∏—Ç–∏ –ø—ñ–Ω(-–∏)')
def choosing_pin_menu(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    pins_data = pins_collection.find()
    pin_buttons = [types.KeyboardButton(pin_data['name']) for pin_data in pins_data]
    back_btn = types.KeyboardButton('–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥')
    cart_button = types.KeyboardButton('–ö–æ—à–∏–∫')
    keyboard.add(*pin_buttons, back_btn, cart_button)

    bot.send_message(message.chat.id, '–û–±–µ—Ä—ñ—Ç—å –ø—ñ–Ω(-–∏):\n', reply_markup=keyboard)


# –ö–æ–ª–∏ –≤–∏–±–∏—Ä–∞—î—à –ø—ñ–Ω:
@bot.message_handler(func=lambda message: message.text in [pin['name'] for pin in pins_collection.find()])
def handle_pin(message):
    user_id = message.from_user.id
    keyboard = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    quantity_buttons = [types.KeyboardButton(str(i)) for i in range(1, 4)]
    back_btn = types.KeyboardButton('–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥')
    keyboard.add(*quantity_buttons, back_btn)
    bot.send_message(message.chat.id, f"–í–∏–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å (–∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å —Ü–∏—Ñ—Ä—É –≤ —á–∞—Ç)",
                     reply_markup=keyboard)
    bot.register_next_step_handler(message, handle_quantity, message.text, user_id)


# –û–±—Ä–æ–±–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø—ñ–Ω—ñ–≤ –≤ –±–∞–∑—ñ
def handle_quantity(message, pin, user_id):
    try:
        quantity = int(message.text)  # –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–Ω—ñ–≤ —è–∫—É –≤–≤—ñ–≤ –∑–∞–º–æ–≤–Ω–∏–∫
        pin_data = pins_collection.find_one({'name': pin})

        if pin_data is None:
            bot.send_message(message.chat.id, "–ü–æ–º–∏–ª–∫–∞: –ø—ñ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            choosing_pin_menu(message)
        else:
            pin_quantity = pin_data['quantity']  # –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–Ω–∞ –≤ –±–∞–∑—ñ
            if 0 < quantity <= pin_quantity:
                cart = carts.get(user_id, {})
                if pin in cart:  # —è–∫—â–æ —Ç–∞–∫–∏–π –ø—ñ–Ω –≤–∂–µ —î –≤ –∫–æ—à–∏–∫—É
                    cart[pin] += quantity
                else:
                    cart[pin] = quantity

                carts[user_id] = cart
                bot.send_message(message.chat.id, f"–ü—ñ–Ω(-–∏) '{pin}' –¥–æ–¥–∞–Ω–æ –≤ –∫–æ—à–∏–∫ ({quantity} —à—Ç.)")
                choosing_pin_menu(message)
            else:
                bot.send_message(message.chat.id, f"–ù–∞ —Å–∫–ª–∞–¥—ñ –Ω–µ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—ñ–Ω—ñ–≤ '{pin}'")
                choosing_pin_menu(message)

    except ValueError:
        if message.text != '–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥':
            bot.send_message(message.chat.id, "[–ü–æ–º–∏–ª–∫–∞] –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ")
        choosing_pin_menu(message)


# –û–±—Ä–æ–±–Ω–∏–∫ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
@bot.callback_query_handler(func=lambda call: True)
def handle_callback_query(call):
    if orders_collection.find_one(
            {'_id': ObjectId(str(call.data).split()[1])}):  # –¥–ª—è –∑–º—ñ–Ω–∏ –¥–∞–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —è–∫—â–æ –≤–æ–Ω–∏ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ
        object_id = ObjectId(str(call.data).split()[1])
        action = str(call.data).split()[0]

        if action == "edit_address":
            edit_data(call.message, object_id, 'nova_post')
        elif action == "edit_phone":
            edit_data(call.message, object_id, 'phone')
        elif action == "edit_name":
            edit_data(call.message, object_id, 'name')


# –û–±—Ä–æ–±–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ –æ–ø–ª–∞—Ç–∏
@bot.message_handler(content_types=['photo'])
def photo_handler(message):
    user_id = message.from_user.id
    # –û–±—Ä–æ–±–∫–∞ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ –æ–ø–ª–∞—Ç–∏
    if orders_collection.find_one({'chatID': user_id, 'order_status': None}):
        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ –æ–ø–ª–∞—Ç–∏
        payment_screenshot = message.photo[-1].file_id
        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ –æ–ø–ª–∞—Ç–∏ –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ
        orders_collection.update_one({'chatID': user_id, 'order_status': None},
                                     {'$set': {'payment_screenshot': payment_screenshot}})

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        confirm_btn = types.KeyboardButton('–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é')
        keyboard.add(confirm_btn)
        bot.send_message(user_id, f'–°–∫—Ä—ñ–Ω—à–æ—Ç —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.\n'
                                  f'–©–æ–± –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è - –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É.', reply_markup=keyboard)

    # –û–±—Ä–æ–±–∫–∞ —è–∫—â–æ —Ü–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏
    if '/spam' in str(message.caption):
        send_spam(message)


# –í–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –≤ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ
def edit_data(message, order_id, field_name):
    user_id = message.chat.id
    bot.send_message(user_id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è:")
    bot.register_next_step_handler(message, lambda msg: update_data(msg, order_id, field_name))


# –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ü–∏—Ö –¥–∞–Ω–∏—Ö –≤ –±–∞–∑—ñ
def update_data(message, order_id, field_name):
    user_id = message.from_user.id
    new_value = message.text
    orders_collection.update_one({'_id': order_id}, {'$set': {field_name: new_value}})
    bot.send_message(user_id,
                     "–î–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ.\n"
                     "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ñ–Ω—à—ñ –ø–æ–ª—è, —è–∫—â–æ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ - –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —Å–∫—Ä—ñ–Ω—à–æ—Ç –æ–ø–ª–∞—Ç–∏")


@bot.message_handler(func=lambda message: str(message.text).lower() == '–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é')
def finally_confirm_order(message):
    user_id = message.from_user.id
    if orders_collection.find_one({'chatID': user_id, 'order_status': None}) is None:
        bot.send_message(user_id, '–°–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥—ñ—Ç—å —Å–≤–æ—ó –¥–∞–Ω—ñ —É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.')
    else:
        if orders_collection.find_one({'chatID': user_id, 'order_status': None})['payment_screenshot'] is None:
            bot.send_message(user_id, '–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –æ–ø–ª–∞—Ç–∏ –ø–µ—Ä–µ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è–º –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.')
        else:
            date = datetime.now()
            orders_collection.update_one({'chatID': user_id, 'order_status': None},
                                         {'$set': {'order_status': 1, 'date': date,
                                                   'order_price': get_order_price(user_id)}})

            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ –æ–ø–ª–∞—Ç–∏
            payment_screenshot = orders_collection.find_one({'chatID': user_id, 'date': date})['payment_screenshot']

            # –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –æ–∫—Ä–µ–º—ñ–π –ª—é–¥–∏–Ω—ñ —Ä–∞–∑–æ–º —ñ–∑ —Å–∫—Ä—ñ–Ω—à–æ—Ç–æ–º –æ–ø–ª–∞—Ç–∏
            order_info = f"–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{message.from_user.username}, id{user_id}:\n\n"
            order_info += f"–ê–¥—Ä–µ—Å–∞ –Ω–æ–≤–æ—ó –ø–æ—à—Ç–∏: {orders_collection.find_one({'chatID': user_id, 'date': date})['nova_post']}\n"
            order_info += f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {orders_collection.find_one({'chatID': user_id, 'date': date})['phone']}\n"
            order_info += f"–ü—Ä—ñ–∑–≤–∏—â–µ, —ñ–º'—è —Ç–∞ –ø–æ –±–∞—Ç—å–∫–æ–≤—ñ: {orders_collection.find_one({'chatID': user_id, 'date': date})['name']}\n"
            order_info += f"–î–æ –æ–ø–ª–∞—Ç–∏: {get_order_price(user_id)}–≥—Ä–Ω.\n\n"
            order = ''
            for pin, quantity in carts[user_id].items():
                order += f"{pin}: {quantity} —à—Ç.\n"

            order_info += order

            # –í—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø—ñ–Ω—ñ–≤ –∑ –±–∞–∑–∏
            for pin, quantity in carts[user_id].items():
                pin_data = pins_collection.find_one({'name': pin})
                pin_data['quantity'] -= quantity
                pins_collection.update_one({'_id': pin_data['_id']}, {'$set': {'quantity': pin_data['quantity']}})

            bot.send_message(MANAGER_CHAT_ID, order_info)
            bot.send_photo(MANAGER_CHAT_ID, payment_screenshot)  # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ –æ–ø–ª–∞—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É

            bot.send_message(user_id, '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ. –î—è–∫—É—î–º–æ, —â–æ –¥–æ–≤—ñ—Ä—è—î—Ç–µ –Ω–∞–º!')
            clear_cart(message)
            start(message)


@bot.message_handler(func=lambda message: message.text == '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
def confirm_order(message):
    user_id = message.from_user.id
    cart = carts.get(user_id, {})
    if not cart:
        bot.send_message(message.chat.id, "–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π")
    else:
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤ –ë–î –Ω–æ–≤–æ–≥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
        order_id = orders_collection.insert_one(
            {'chatID': user_id, 'phone': None, 'name': None, 'nova_post': None,
             'product': cart,
             'order_price': None,
             'payment_screenshot': None,
             'order_status': None,
             'date': None}).inserted_id

        bot.send_message(user_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –Ω–æ–≤–æ—ó –ø–æ—à—Ç–∏:")
        bot.register_next_step_handler(message, process_post_office, order_id)


def process_post_office(message, order_id):
    user_id = message.from_user.id
    nova_post = message.text

    # –ó–±–µ—Ä–µ–≥—Ç–∏ –ø–æ—à—Ç—É –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ
    orders_collection.update_one({'_id': order_id}, {'$set': {'nova_post': nova_post}})

    bot.send_message(user_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    bot.register_next_step_handler(message, process_phone, order_id)


def process_phone(message, order_id):
    user_id = message.from_user.id
    phone = message.text

    # –ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ
    orders_collection.update_one({'_id': order_id}, {'$set': {'phone': phone}})

    # –ó–∞–ø–∏—Ç–∞—Ç–∏ –ø—Ä—ñ–∑–≤–∏—â–µ, —ñ–º'—è —Ç–∞ –ø–æ –±–∞—Ç—å–∫–æ–≤—ñ
    bot.send_message(user_id, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ, —ñ–º'—è —Ç–∞ –ø–æ –±–∞—Ç—å–∫–æ–≤—ñ:")
    bot.register_next_step_handler(message, process_name, order_id)


def process_name(message, order_id):
    user_id = message.from_user.id
    name = message.text

    # –ó–±–µ—Ä–µ–≥—Ç–∏ –ø—Ä—ñ–∑–≤–∏—â–µ, —ñ–º'—è —Ç–∞ –ø–æ –±–∞—Ç—å–∫–æ–≤—ñ –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—ñ
    orders_collection.update_one({'_id': order_id}, {'$set': {'name': name}})

    # –í–∏–≤–µ—Å—Ç–∏ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
    order_info = f"–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ:\n\n"
    order_info += f"–ê–¥—Ä–µ—Å–∞ –Ω–æ–≤–æ—ó –ø–æ—à—Ç–∏: {orders_collection.find_one({'_id': order_id})['nova_post']}\n"
    order_info += f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {orders_collection.find_one({'_id': order_id})['phone']}\n"
    order_info += f"–ü—Ä—ñ–∑–≤–∏—â–µ, —ñ–º'—è —Ç–∞ –ø–æ –±–∞—Ç—å–∫–æ–≤—ñ: {orders_collection.find_one({'_id': order_id})['name']}\n"

    order_info += f"–í—Å—å–æ–≥–æ –¥–æ –æ–ø–ª–∞—Ç–∏: {get_order_price(user_id)}–≥—Ä–Ω.\n\n"

    order_info += (
        "–î–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ:\n"
        "1. –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç –æ–ø–ª–∞—Ç–∏\n"
        "2. –ù–∞—Ç–∏—Å–Ω—É—Ç–∏ –∫–Ω–æ–ø–∫—É '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é'\n"
        "\n–î–∞–Ω—ñ –¥–ª—è –æ–ø–ª–∞—Ç–∏:\n"
        "–ö–∞—Ä—Ç–∫–∞ 5555 5555 5555 5555\n"
        "\n–Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ, –≤–∏–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–Ω–æ–ø–∫—É.")

    keyboard = types.InlineKeyboardMarkup()
    edit_address_button = types.InlineKeyboardButton(text="‚úçÔ∏è–ê–¥—Ä–µ—Å–∞", callback_data=f"edit_address {order_id}")
    edit_phone_button = types.InlineKeyboardButton(text="‚úçÔ∏è–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É",
                                                   callback_data=f"edit_phone {order_id}")
    edit_name_button = types.InlineKeyboardButton(text="‚úçÔ∏è–ü–Ü–ë", callback_data=f"edit_name {order_id}")

    keyboard.add(edit_address_button, edit_phone_button, edit_name_button)
    bot.send_message(user_id, order_info, reply_markup=keyboard, disable_web_page_preview=True)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    confirm_btn = types.KeyboardButton('–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é')
    markup.add(confirm_btn)
    bot.send_message(user_id, '–û—á—ñ–∫—É—î–º–æ —Å–∫—Ä—ñ–Ω—à–æ—Ç –æ–ø–ª–∞—Ç–∏', reply_markup=markup)


# =====================================Manager===========================================================
# –∫–æ–º–∞–Ω–¥–∞ /help –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
@bot.message_handler(commands=['help'])
def change_pin(message):
    if str(message.chat.id) != MANAGER_CHAT_ID:
        return
    bot.send_message(message.chat.id,
                     f'/change_quantity <–ù–∞–∑–≤–∞ –ø—ñ–Ω–∞> <–∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–Ω—ñ–≤> - –∑–º—ñ–Ω–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–Ω—ñ–≤ –≤ –±–∞–∑—ñ\n'
                     f'/change_price <–ù–∞–∑–≤–∞ –ø—ñ–Ω–∞> <–ù–æ–≤–∞ —Ü—ñ–Ω–∞> - –∑–º—ñ–Ω–∏—Ç–∏ —Ü—ñ–Ω—É –Ω–∞ –ø—ñ–Ω\n'
                     f'/add_pin <–ù–∞–∑–≤–∞ –ø—ñ–Ω–∞> <–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–Ω—ñ–≤> <–¶—ñ–Ω–∞ –ø—ñ–Ω–∞> - –¥–æ–¥–∞—Ç–∏ –ø—ñ–Ω –≤ –±–∞–∑—É\n'
                     f'/delete_pin <–ù–∞–∑–≤–∞ –ø—ñ–Ω–∞> - –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—ñ–Ω –∑ –±–∞–∑–∏\n'
                     f'/pins_info - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø–æ –ø—ñ–Ω–∞–º –∑ –±–∞–∑–∏\n'
                     f'/spam <–¢–µ–∫—Å—Ç –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏> (—Ç–∞–∫–æ–∂ –º–æ–∂–Ω–∞ –¥–æ —Ç–µ–∫—Å—Ç—É –¥–æ–¥–∞–≤–∞—Ç–∏ —Ñ–æ—Ç–æ, –∞–ª–µ —Ç—ñ–ª—å–∫–∏ –æ–¥–Ω–µ)\n'
                     f'/set_status <userID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞> <–Ω–æ–º–µ—Ä —Å—Ç–∞—Ç—É—Å—É(0 - –∑–≤–∏—á–∞–π–Ω–∏–π, 1 - –≤–æ–ª–æ–Ω—Ç–µ—Ä(-–∫–∞), 2 - –≤—ñ–π—Å—å–∫–æ–≤–∏–π(-–≤–∞))>\n'
                     f'/delete_null_orders - –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è\n'
                     f'/send_message <userID –∫–ª—ñ—î–Ω—Ç–∞> <–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è> - –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞\n'
                     f'/download_payment <fileID> - –ø–æ–ª—É—á–∏—Ç–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é –æ–ø–ª–∞—Ç–∏ –ø–æ payment_screenshot\n')


# –§—É–Ω–∫—Ü—ñ—è –∑–º—ñ–Ω–∏ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø—ñ–Ω—ñ–≤ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
@bot.message_handler(commands=['change_quantity'])
def change_pin(message):
    try:
        if str(message.chat.id) != MANAGER_CHAT_ID:
            return
        pin = message.text.replace('/change_quantity ', '')
        pin_name = ' '.join(pin.split()[:-1])

        pin_data = pins_collection.find_one({'name': pin_name})

        if pin_data:
            new_pin_value = int(pin.split()[-1])
            pin_data['quantity'] = new_pin_value
            pins_collection.update_one({'_id': pin_data['_id']}, {'$set': {'quantity': new_pin_value}})
            bot.reply_to(message, f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—ñ–Ω—ñ–≤ '{pin_name}' –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {new_pin_value}")
        else:
            bot.reply_to(message, f"–ü—ñ–Ω '{pin_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    except Exception as e:
        bot.reply_to(message, f'–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}')


# –§—É–Ω–∫—Ü—ñ—è –∑–º—ñ–Ω–∏ —Ü—ñ–Ω–∏ –ø—ñ–Ω–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
@bot.message_handler(commands=['change_price'])
def update_price_by_name(message):
    try:
        if str(message.chat.id) != MANAGER_CHAT_ID:
            return
        pin = message.text.replace('/change_price ', '')
        pin_name = ' '.join(pin.split()[:-1])
        pin_data = pins_collection.find_one({'name': pin_name})

        if pin_data:
            new_pin_price = int(pin.split()[-1])
            pin_data['price'] = new_pin_price
            pins_collection.update_one({'_id': pin_data['_id']}, {'$set': {'price': new_pin_price}})
            bot.reply_to(message, f"–¶—ñ–Ω–∞ –ø—ñ–Ω–∞ '{pin_name}' –∑–º—ñ–Ω–µ–Ω–∞ –Ω–∞ {new_pin_price}")
        else:
            bot.reply_to(message, f"–ü—ñ–Ω '{pin_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    except Exception as e:
        bot.reply_to(message, f'–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}')


# –§—É–Ω–∫—Ü—ñ—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –ø—ñ–Ω–∞ –≤ –±–∞–∑—É, —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
@bot.message_handler(commands=['add_pin'])
def add_new_pin(message):
    try:
        if str(message.chat.id) != MANAGER_CHAT_ID:
            return
        try:
            pin = message.text.replace('/add_pin ', '')
            pin_name = ' '.join(pin.split()[:-2])
            pin_quantity = int(pin.split()[-2])
            pin_price = int(pin.split()[-1])
            pin_data = {
                'name': pin_name,
                'quantity': pin_quantity,
                'price': pin_price
            }
            pins_collection.insert_one(pin_data)

            bot.send_message(message.chat.id, f"–ü—ñ–Ω '{pin_name}' –¥–æ–¥–∞–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")
        except ValueError:
            bot.send_message(message.chat.id,
                             "[–ü–æ–º–∏–ª–∫–∞] –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ '/add_pin –Ω–∞–∑–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ü—ñ–Ω–∞'")
    except Exception as e:
        bot.reply_to(message, f'–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}')


# –§—É–Ω–∫—Ü—ñ—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—ñ–Ω–∞ –∑ –±–∞–∑–∏, —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
@bot.message_handler(commands=['delete_pin'])
def delete_pin(message):
    try:
        if str(message.chat.id) != MANAGER_CHAT_ID:
            return
        pin_name = message.text.replace('/delete_pin ', '')
        pin_data = pins_collection.find_one({'name': pin_name})

        if pin_data:
            pins_collection.delete_one({'_id': pin_data['_id']})
            bot.reply_to(message, f"–ü—ñ–Ω '{pin_name}' –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")
        else:
            bot.reply_to(message, f"–ü—ñ–Ω '{pin_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    except Exception as e:
        bot.reply_to(message, f'–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}')


# –ü–æ–¥–∏–≤–∏—Ç–∏—Å—å —ñ–Ω—Ñ—É –ø—Ä–æ –ø—ñ–Ω–∏
@bot.message_handler(commands=['pins_info'])
def pin_count(message):
    try:
        if str(message.chat.id) != MANAGER_CHAT_ID:
            return
        pins_data = pins_collection.find()
        pins_info = ""
        for pin_data in pins_data:
            pin_name = pin_data['name']
            pin_quantity = pin_data['quantity']
            pin_price = pin_data['price']
            pins_info += f"–ù–∞–∑–≤–∞: {pin_name}\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å: {pin_quantity}\n–¶—ñ–Ω–∞: {pin_price}\n\n"
        bot.send_message(message.chat.id, pins_info)
    except Exception as e:
        bot.reply_to(message, f'–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}')


# –†–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@bot.message_handler(commands=['spam'])
def send_spam(message):
    try:
        if str(message.chat.id) == MANAGER_CHAT_ID:
            # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
            users = clients_collection.find({})
            try:
                # –Ø–∫—â–æ –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ñ–æ—Ç–æ
                if message.photo:
                    photo = message.photo[-1].file_id
                    text = str(message.caption).replace('/spam ', '')
                    for user in users:
                        chat_id = user['chatID']
                        time.sleep(0.5)
                        # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                        bot.send_photo(chat_id, photo, caption=text)
                else:
                    for user in users:
                        chat_id = user['chatID']
                        time.sleep(0.5)
                        text = str(message.text).replace('/spam ', '')
                        # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                        bot.send_message(chat_id, text)
            except apihelper.ApiTelegramException as e:
                print(f"[ERROR CODE] {e.error_code}, –æ–ø–∏—Å –ø–æ–º–∏–ª–∫–∏: {e.description}")
    except Exception as e:
        bot.reply_to(message, f'–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}')


# –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –∫–ª—ñ—î–Ω—Ç—É (–≤–æ–ª–æ–Ω—Ç–µ—Ä(-–∫–∞)/(–≤—ñ–π—Å—å–∫–æ–≤–∏–π(-–≤–∞)
@bot.message_handler(commands=['set_status'])
def set_status(message):
    if str(message.chat.id) != MANAGER_CHAT_ID:
        return
    try:
        _, user_id, status = message.text.split()
        user_id = int(user_id)  # –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è user_id —É —Ü—ñ–ª–µ —á–∏—Å–ª–æ
        status = int(status)  # –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è status —É —Ü—ñ–ª–µ —á–∏—Å–ª–æ
        clients_collection.update_one({'chatID': user_id}, {"$set": {'status': status}})
        bot.reply_to(message, f"–°—Ç–∞—Ç—É—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–æ {status}.")
        bot.send_message(user_id, f'–í–∞—à —Å—Ç–∞—Ç—É—Å –±—É–ª–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º. –î—è–∫—É—î–º–æ —â–æ –¥–æ–ø–æ–º–∞–≥–∞—î—Ç–µ –¥–µ—Ä–∂–∞–≤—ñ!')
    except Exception as e:
        bot.reply_to(message, f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É.\n {e}")


@bot.message_handler(commands=['delete_null_orders'])
def delete_null_orders(message):
    if str(message.chat.id) != MANAGER_CHAT_ID:
        return
    orders_collection.delete_many({
        "order_price": None,
        "order_status": None,
        "date": None
    })

    bot.reply_to(message, "–ù–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ")


@bot.message_handler(commands=['send_message'])
def send_message_to_user(message):
    if str(message.chat.id) != MANAGER_CHAT_ID:
        return
    user_id = message.text.split()[1]
    msg = ' '.join(message.text.split()[2:])
    bot.send_message(user_id, msg)
    bot.reply_to(message, "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ")


@bot.message_handler(commands=['download_payment'])
def download_photo_by_file_id(message):
    if str(message.chat.id) != MANAGER_CHAT_ID:
        return
    _, file_id = message.text.split()
    # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É —Ñ–æ—Ç–æ –æ–ø–ª–∞—Ç–∏
    bot.send_photo(MANAGER_CHAT_ID, file_id)


# –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling()
